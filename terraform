## Terraform Taint

Use case: Suppose you have an AWS EC2 instance managed by Terraform, and you suspect that the instance is in an unhealthy state and want to force its recreation.

main.tf
```
provider "aws" {
  region = "us-west-2"
}

resource "aws_instance" "example" {
  ami           = "ami-0c55b159cbfafe1f0" # Amazon Linux 2 AMI
  instance_type = "t2.micro"

  tags = {
    Name = "ExampleInstance"
  }
}
```
```
* terraform init
* terraform apply
* terraform state list
* terraform taint 
terraform taint aws_instance.example

# terraform taint aws_instance.example
Resource instance aws_instance.example has been marked as tainted.
ranjiniganeshan@Ranjinis-MacBook-Pro terraform-taint % 
#####


```
ranjiniganeshan@Ranjinis-MacBook-Pro terraform-state % terraform force-unlock 4bad7656-65f3-e8d1-6aa9-7d3ecac9b7d3
Local state cannot be unlocked by another process
ranjiniganeshan@Ranjinis-MacBook-Pro terraform-state % terraform plan -lock=false
module.ec2_instance.data.aws_partition.current: Reading...
module.ec2_instance.data.aws_ssm_parameter.this[0]: Reading...
module.ec2_instance.data.aws_partition.current: Read complete after 0s [id=aws]
aws_dynamodb_table.terraform_locks: Refreshing state... [id=terraform-state-locking]
aws_instance.ec2_example: Refreshing state... [id=i-097d1fa9fe28d3920]
module.ec2_instance.data.aws_ssm_parameter.this[0]: Read complete after 2s [id=/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2]
module.ec2_instance.aws_instance.this[0]: Refreshing state... [id=i-0d78279846288fd47]

Terraform used the selected providers to generate the following execution plan. Resource
actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # aws_s3_bucket.terraform-backend-bucket will be created
  + resource "aws_s3_bucket" "terraform-backend-bucket" {
      + acceleration_status         = (known after apply)
      + acl                         = (known after apply)
      + arn                         = (known after apply)
      + bucket                      = "backend-bucket-infra123"
      + bucket_domain_name          = (known after apply)
      + bucket_prefix               = (known after apply)
      + bucket_regional_domain_name = (known after apply)
      + force_destroy               = false
      + hosted_zone_id              = (known after apply)
      + id                          = (known after apply)
      + object_lock_enabled         = (known after apply)
      + policy                      = (known after apply)
      + region                      = (known after apply)
      + request_payer               = (known after apply)
      + tags                        = {
          + "Environment" = "dev"
          + "Name"        = "tf-bucket"
        }
      + tags_all                    = {
          + "Environment" = "dev"
          + "Name"        = "tf-bucket"
        }
      + website_domain              = (known after apply)
      + website_endpoint            = (known after apply)
    }

Plan: 1 to add, 0 to change, 0 to destroy.

───────────────────────────────────────────────────────────────────────────────────────────────

Note: You didn't use the -out option to save this plan, so Terraform can't guarantee to take
exactly these actions if you run "terraform apply" now.
ranjiniganeshan@Ranjinis-MacBook-Pro terraform-state % terraform apply -lock=false
module.ec2_instance.data.aws_partition.current: Reading...
module.ec2_instance.data.aws_ssm_parameter.this[0]: Reading...
aws_dynamodb_table.terraform_locks: Refreshing state... [id=terraform-state-locking]
module.ec2_instance.data.aws_partition.current: Read complete after 0s [id=aws]
aws_instance.ec2_example: Refreshing state... [id=i-097d1fa9fe28d3920]
module.ec2_instance.data.aws_ssm_parameter.this[0]: Read complete after 2s [id=/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2]
module.ec2_instance.aws_instance.this[0]: Refreshing state... [id=i-0d78279846288fd47]

Terraform used the selected providers to generate the following execution plan. Resource
actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # aws_s3_bucket.terraform-backend-bucket will be created
  + resource "aws_s3_bucket" "terraform-backend-bucket" {
      + acceleration_status         = (known after apply)
      + acl                         = (known after apply)
      + arn                         = (known after apply)
      + bucket                      = "backend-bucket-infra123"
      + bucket_domain_name          = (known after apply)
      + bucket_prefix               = (known after apply)
      + bucket_regional_domain_name = (known after apply)
      + force_destroy               = false
      + hosted_zone_id              = (known after apply)
      + id                          = (known after apply)
      + object_lock_enabled         = (known after apply)
      + policy                      = (known after apply)
      + region                      = (known after apply)
      + request_payer               = (known after apply)
      + tags                        = {
          + "Environment" = "dev"
          + "Name"        = "tf-bucket"
        }
      + tags_all                    = {
          + "Environment" = "dev"
          + "Name"        = "tf-bucket"
        }
      + website_domain              = (known after apply)
      + website_endpoint            = (known after apply)
    }

Plan: 1 to add, 0 to change, 0 to destroy.

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value: yes

aws_s3_bucket.terraform-backend-bucket: Creating...
aws_s3_bucket.terraform-backend-bucket: Creation complete after 7s [id=backend-bucket-infra123]

Apply complete! Resources: 1 added, 0 changed, 0 destroyed.
ranjiniganeshan@Ranjinis-MacBook-Pro terraform-state % 

```

```
Initializing modules...

Initializing provider plugins...
- Reusing previous version of hashicorp/aws from the dependency lock file
- Using previously-installed hashicorp/aws v5.4.0

Terraform has been successfully initialized!

You may now begin working with Terraform. Try running "terraform plan" to see
any changes that are required for your infrastructure. All Terraform commands
should now work.

If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.
ranjiniganeshan@Ranjinis-MacBook-Pro terraform-state % terraform init -migrate-state

Initializing the backend...
Initializing modules...

Initializing provider plugins...
- Reusing previous version of hashicorp/aws from the dependency lock file
- Using previously-installed hashicorp/aws v5.4.0

Terraform has been successfully initialized!

You may now begin working with Terraform. Try running "terraform plan" to see
any changes that are required for your infrastructure. All Terraform commands
should now work.

If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.
ranjiniganeshan@Ranjinis-MacBook-Pro terraform-state % terraform init -migrate-state

Initializing the backend...
Backend configuration changed!

Terraform has detected that the configuration specified for the backend
has changed. Terraform will now check for existing state in the backends.

key
  The path to the state file inside the bucket

  Enter a value: dev

Do you want to copy existing state to the new backend?
  Pre-existing state was found while migrating the previous "s3" backend to the
  newly configured "s3" backend. No existing state was found in the newly
  configured "s3" backend. Do you want to copy this state to the new "s3"
  backend? Enter "yes" to copy and "no" to start with an empty state.

  Enter a value: yes

Releasing state lock. This may take a few moments...
Releasing state lock. This may take a few moments...

Successfully configured the backend "s3"! Terraform will automatically
use this backend unless the backend configuration changes.
Initializing modules...

Initializing provider plugins...
- Reusing previous version of hashicorp/aws from the dependency lock file
- Using previously-installed hashicorp/aws v5.4.0

Terraform has been successfully initialized!

You may now begin working with Terraform. Try running "terraform plan" to see
any changes that are required for your infrastructure. All Terraform commands
should now work.

If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.
```

