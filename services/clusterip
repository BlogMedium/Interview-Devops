## ClusterIP 
is the default service type in Kubernetes which is accessible only within the Kubernetes cluster. 
It exposes application pods to internal network traffic which enables communication with other objects running within the cluster. 

for example : if we have different microservices in eks cluster. frontend micorservice can talk to backend microservice.

clusterip.yaml
```
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-deployment
spec:
  replicas: 2
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      -  image: nginx
         name: nginc-ctr
---         
apiVersion: v1
kind: Service
metadata:
  name: nginx-deployment-clusterip-svc
spec:
  selector:
    app: nginx
  type: ClusterIP
  ports:
    - name: nginx-port
      protocol: TCP
      port: 32767
      targetPort: 80
```

* kubectl apply -f clusterip.yaml

 kubectl get endpoints
NAME                             ENDPOINTS                               AGE
kubernetes                       192.168.156.191:443,192.168.97.85:443   18m
nginx-deployment-clusterip-svc   192.168.37.187:80,192.168.8.145:80      8m13s
* on worker node get the pod ip
```
  * curl 192.168.37.187:80
<!DOCTYPE html>
<html>
<head>
<title>Welcome to nginx!</title>
<style>
html { color-scheme: light dark; }
body { width: 35em; margin: 0 auto;
font-family: Tahoma, Verdana, Arial, sans-serif; }
</style>
</head>
<body>
<h1>Welcome to nginx!</h1>
<p>If you see this page, the nginx web server is successfully installed and
working. Further configuration is required.</p>

<p>For online documentation and support please refer to
<a href="http://nginx.org/">nginx.org</a>.<br/>
Commercial support is available at
<a href="http://nginx.com/">nginx.com</a>.</p>

<p><em>Thank you for using nginx.</em></p>
</body>
</html>
```
  * curl endpoint

## NodePort Service

In Kubernetes, a NodePort service exposes an application to outside world.from the range 30000-32767 on every node in the cluster and 
forwards traffic to the corresponding ClusterIP service running on that node.
```
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-deployment
spec:
  replicas: 2
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      -  image: nginx
         name: nginc-ctr
---         
apiVersion: v1
kind: Service
metadata:
  name: nginx-deployment-clusterip-svc
spec:
  selector:
    app: nginx
  type: NodePort
  ports:
    - name: nginx-port
      protocol: TCP
      port: 32767
      targetPort: 80
      nodePort: 30000

```

$ kubectl apply -f nodeport.yaml

$ kubectl get all

$ kubectl get nodes -o wide ( get the public ip of the nodes)\
* open the port (security group_
* browser http://workernodeip:30000
```

## The LoadBalancer service type in Kubernetes exposes a service outside the cluster and automatically provisions a load balancer in a cloud environment like AWSetc
It creates a unique IP address that distributes incoming traffic across multiple instances of our application running in the cluster.


```apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-deployment
spec:
  replicas: 2
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      -  image: nginx
         name: nginc-ctr
---         
apiVersion: v1
kind: Service
metadata:
  name: nginx-deployment-clusterip-svc
spec:
  selector:
    app: nginx
  type: LoadBalancer
  ports:
    - name: nginx-port
      protocol: TCP
      port: 80       # The port on which the service is exposed
      targetPort: 80 # The port on which the Nginx container is listening

```

```
kubectl apply -f loadbalancer.yaml
kubectl get svc 
http://external dns







